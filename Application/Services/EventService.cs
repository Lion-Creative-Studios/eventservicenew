using Application.Models;
using Azure.Core;
using Microsoft.Extensions.Logging;
using Persistance.Entities;
using Persistance.Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Application.Services;

public class EventService(IEventRepository eventRepository) : IEventService
{
    private readonly IEventRepository _eventRepository = eventRepository;

    /* Generated by chatgpt 4o, based on previous code and from bookingservice */
    public async Task<EventResult> CreateEventAsync(CreateEventRequest request)
    {
        var eventEntity = new EventEntity
        {
            Image = request.Image,
            Title = request.Title,
            Description = request.Description,
            Location = request.Location,
            EventDate = request.EventDate,
            Packages = request.Packages.Select(p => new EventPackageEntity
            {
                Package = new PackageEntity
                {
                    Title = p.Title,
                    SeatingArrangement = p.SeatingArrangement,
                    Placement = p.Placement,
                    Price = p.Price,
                    Currency = p.Currency
                }
            }).ToList()
        };

        var result = await _eventRepository.AddAsync(eventEntity);

        return result.Success
            ? new EventResult { Success = true }
            : new EventResult { Success = false, Error = result.Error };
    }
    /* Generated by chatgpt 4o, based on previous code and from bookingservice */

    /* Generated by chatgpt 4o, based on previous code and from bookingservice */
    public async Task<EventResult<IEnumerable<EventWithPrice>>> GetEventsAsync()
    {
        var result = await _eventRepository.GetAllAsync();

        if (!result.Success)
        {
            return new EventResult<IEnumerable<EventWithPrice>>
            {
                Success = false,
                Error = result.Error
            };
        }

        var events = result.Result?.Select(e => new EventWithPrice
        {
            Id = e.Id,
            Image = e.Image,
            Title = e.Title,
            EventDate = e.EventDate,
            Location = e.Location,
            Description = e.Description,
            Packages = e.Packages.Select(p => new PackageDto
            {
                Title = p.Package.Title,
                SeatingArrangement = p.Package.SeatingArrangement,
                Placement = p.Package.Placement,
                Price = p.Package.Price,
                Currency = p.Package.Currency
            }).ToList()
        });

        return new EventResult<IEnumerable<EventWithPrice>>
        {
            Success = true,
            Result = events
        };
    }

    /* Generated by chatgpt 4o, based on previous code and from bookingservice */
    public async Task<EventResult<EventWithPrice?>> GetEventAsync(string eventId)
    {
        var result = await _eventRepository.GetAsync(x => x.Id == eventId);

        if (!result.Success)
        {
            return new EventResult<EventWithPrice?> { Success = false, Error = result.Error };
        }

        if (result.Result == null)
        {
            return new EventResult<EventWithPrice?> { Success = false, Error = "Event Not Found" };
        }

        var e = result.Result;

        var eventWithPrice = new EventWithPrice
        {
            Id = e.Id,
            Image = e.Image,
            Title = e.Title,
            EventDate = e.EventDate,
            Location = e.Location,
            Description = e.Description,
            Packages = e.Packages.Select(p => new PackageDto
            {
                Title = p.Package.Title,
                SeatingArrangement = p.Package.SeatingArrangement,
                Placement = p.Package.Placement,
                Price = p.Package.Price,
                Currency = p.Package.Currency
            }).ToList()
        };

        return new EventResult<EventWithPrice?> { Success = true, Result = eventWithPrice };
    }

}
